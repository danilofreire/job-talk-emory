---
title: Introduction to Python Functions
subtitle: Because copy-pasting code is so last semester
date: 2025-02-07
date-format: "MMMM DD, YYYY"
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: Emory University
format:
  clean-revealjs:
    self-contained: true
    code-overflow: wrap
    footer: "[Python Functions](https://danilofreire.github.io/job-talk-emory/lecture.html)"
    drop:
      button: true
      engine: pyodide
      pyodide:
        packages:
          - matplotlib
          - micropip
          - numpy
          - pandas
          - seaborn
bibliography: references.bib
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
revealjs-plugins:
  - drop
  - fontawesome
  - multimodal
editor:
  render-on-save: true
---

# Welcome to Python Functions! <br> Let's Code Smarter 🧠 {background-color="#2d4563"}

## Today's Journey

:::{style="margin-top: 40px; font-size: 26px;"}
- [Why Functions?]{.alert} ♻️
- [Function Anatomy] 🔍
- [Parameters vs Arguments] ↔️
- [Live Coding] 🎮
- [Best Practices] ✅
- [Q&A + Exercises] 🏋️
:::

# Why Functions? {background-color="#4b8bbe"}

## The Repetition Nightmare 😱

:::{.columns}
:::{.column width="55%"}
```python
# Bad Code Alert! 🚨
print("Welcome Alice!")
print("Welcome Bob!")
print("Welcome Charlie!")
# ... repeats 997 more times ...
```
:::

:::{.column width="45%"}
![Repetition](https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif){style="height:200px"}
:::
:::

:::{.fragment}
**Problems:**
- 🤦 Error-prone updates
- 📏 1000 lines of same code
- 😵 Hard to maintain
:::

---

## Functions to the Rescue! 🦸

:::{.columns}
:::{.column width="50%"}
```python
# Clean Solution ✨
def welcome(name):
    print(f"Welcome {name}!")

welcome("Alice")
welcome("Bob")
welcome("Charlie")
```
:::

:::{.column width="50%"}
**Benefits:**
- ♻️ Reusable code
- 📦 Organized logic
- 🔄 One change updates all
- 📖 Readable structure
:::
:::

:::{.fragment .fade-up}
![DRY Principle](https://media.giphy.com/media/l0HU7JI7qifdINkA8/giphy.gif){style="height:200px"}
:::

---

# Function Anatomy 🔍 {background-color="#2d4563"}

## Building Blocks of a Function

:::{.columns}
:::{.column width="50%"}
```python
def calculate_bmi(weight, height):
    """Calculate Body Mass Index"""
    bmi = weight / (height ** 2)
    return bmi
```

:::

:::{.column width="50%"}
![Function Anatomy](https://mermaid.ink/svg/pako:eNpVj7sOgkAURP_FzF5AhBQ2JhpjY2NDZcE-4FJcWIRdFhT_3mWNRhOT6pw5M5nMxNlB1qjRcEoZc0C3E5wj5hQx4jRg0xKcIhYt7rS4u8Q9uG6J8y0aPqHlG_4Z3hK8hP1DnCJWHXG6xT3mF4IXQn3vVKq1Uo0uV1Y1sYy2y7J4tq5h5rKxQ5qyT0h1gFq4xKt8l1QpJxVXkXH3VnqH9EeCjQ7gxH2A6wH2E8wnmC5QzrBdYrbDfY7rA_4HjC-YLrDfcH7i88X3i_8P3g_8H_4w8f4DqF)
:::
:::

---

## Parameters vs Arguments ↔️

:::{.columns}
:::{.column width="45%"}
**Parameters**  
*(Recipe Ingredients)*  
```python
def greet(name, greeting="Hello"):
    # name and greeting are parameters
    print(f"{greeting}, {name}!")
```
:::

:::{.column width="55%"}
**Arguments**  
*(Actual Ingredients)*  
```python
greet("Alice", "Hi")  # Positional
greet(greeting="Bonjour", name="Bob")  # Keyword
```
:::
:::

:::{.fragment}
![Parameters vs Arguments](https://media.giphy.com/media/3o7TKMt1VVNkHV2PaE/giphy.gif){style="height:250px"}
:::

---

# Let's Code Together! 🎮 {background-color="#4b8bbe"}

## Exercise 1: Area Calculator

:::{style="font-size:24px;"}
```python
def calculate_area(length, width):
    # Your code here...
    return ???

# Test cases
print(calculate_area(5, 4))  # Should return 20
print(calculate_area(3, 7))  # Should return 21
```
:::

:::{.fragment}
```python
# Solution
def calculate_area(length, width):
    return length * width
```
:::

---

## Exercise 2: Smart Greeter 🤓

```python
def create_greeting(name, age, city="Unknown"):
    # Return message like:
    # "Hello Alice (25) from Paris!"
    ???

print(create_greeting("Alice", 25, "Paris"))  
# "Hello Alice (25) from Paris!"
print(create_greeting("Bob", 30))  
# "Hello Bob (30) from Unknown!"
```

:::{.fragment}
```python
# Solution
def create_greeting(name, age, city="Unknown"):
    return f"Hello {name} ({age}) from {city}!"
```
:::

---

# Pro Tips & Pitfalls ⚠️ {background-color="#2d4563"}

## Best Practices ✅

:::{style="font-size:24px;"}
- **Single Responsibility**  
  One function = One task

- **Meaningful Names**  
  `calculate_tax()` not `do_stuff()`

- **Docstrings** 📄  
  ```python
  def convert_currency(amount, rate):
      """Convert amount using exchange rate
      
      Args:
          amount (float): Money to convert
          rate (float): Exchange rate
          
      Returns:
          float: Converted amount
      """
      return amount * rate
  ```
:::

---

## Common Pitfalls 🕳️

:::{style="font-size:24px;"}
1. **Mutable Defaults**  
   ```python
   # Dangerous 🚨
   def add_item(item, lst=[]):
       lst.append(item)
       return lst
   
   # Safe ✅
   def add_item(item, lst=None):
       lst = lst or []
       lst.append(item)
       return lst
   ```

2. **Return vs Print**  
   ```python
   # Bad - Can't reuse value 🚫
   def double(x):
       print(x * 2)
   
   # Good - Returns value ✅
   def double(x):
       return x * 2
   ```
:::

---

# Quick Quiz! ❓ {background-color="#4b8bbe"}

:::{style="font-size:28px;"}
What does this print?
```python
def mystery(x=[]):
    x.append(1)
    return x

print(mystery(), mystery())
```

:::{.fragment}
**Answer:**  
`[1, 1] [1, 1]`  
*Because default list is created once!*
:::

---

# Next Steps 🚀 {background-color="#2d4563"}

## Keep Learning!

:::{style="font-size:24px;"}
- 📚 [Real Python Functions Guide](https://realpython.com/defining-your-own-python-function/)
- 🎥 [Corey Schafer Functions Tutorial](https://youtu.be/9Os0o3wzS_I)
- 💻 Practice on [Codewars](https://www.codewars.com/)  
  (Search for "Python functions")

![Coding Practice](https://media.giphy.com/media/Y4ak9Ki2GZCbJxAnJD/giphy.gif){style="height:250px"}
:::

---

# Thank You! 😊 {background-color="#4b8bbe"}

:::{style="font-size:32px;"}
Questions?  
Let's Code!  
[[Exercise Solutions]{.button}](#sec:solutions)
:::

---

## Appendix: Solutions {#sec:solutions}

### Area Calculator
```python
def calculate_area(length, width):
    return length * width
```

### Smart Greeter
```python
def create_greeting(name, age, city="Unknown"):
    return f"Hello {name} ({age}) from {city}!"
```

[[Back to Start]{.button}](#title-slide)
```
